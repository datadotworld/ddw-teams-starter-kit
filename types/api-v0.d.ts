/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v0/aice/{orgid}/{projectid}/answerTool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Answer Tool
         * @description Answer the given natural language question. Please note, it only has the capability to answer questions on structured data. The payload should contain the question, and optionally, any supplemental context that could be beneficial, such as additional information from a second query attempt after the user has provided further context.
         */
        post: operations["callAnswerTool"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AnswerResponse: {
            answer: string;
            questionUrl?: string;
            sparql?: string;
            terms?: components["schemas"]["Term"][];
        };
        QuestionPayload: {
            /** @description The context of the chat so far (optional). */
            chatContext?: string;
            /** @description A question that can be answered by structured data, written in English. */
            question?: string;
        };
        Term: {
            definition?: string;
            term?: string;
            url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    callAnswerTool: {
        parameters: {
            query?: {
                /** @description Don't execute the call using the context engine. Instead, return a mock answer generated by the llm. */
                demo?: boolean;
            };
            header?: never;
            path: {
                /** @description Unique identifier of the organization that owns the project.
                 *     For example, in the URL: https://acme.data.world/jonloyens/an-intro-to-dataworld, jonloyens is the unique identifier of the owner. */
                orgid: string;
                /** @description Unique identifier for the project.
                 *     For example, in the URL: https://acme.data.world/jonloyens/an-intro-to-dataworld, an-intro-to-dataworld is the projectid. */
                projectid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionPayload"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswerResponse"];
                };
            };
        };
    };
}
